DATA TYPES

*In cs object refers to value in the memory that can be refernced using identifiers.

#Javascript handles variables differently while passing it to functions, Variable can passed as value and passed as reference depending upon the type of data they hold.

In javascript there a two types of data types 

    *Primitve (pass by value) uses stack datatype
    *Non-Primitve (pass by reference) uses heap datatype


#PRIMITIVE (Pass By Value)

*Number
*Bigint
*String
*Boolean
*Null
*Undefined

when the value is provided to the funciton the copy of the varialbe is passed and changes made to the value does not effect the original value

eg: 
********************* CODE *************************

let num = 23;

function change(x){
    x = 32
    console.log(x)
}

change(num);
console.log(num)


******************** OUTPUT ************************

>> 32
>> 23

the original value of the variable dosen't change



#NON-PRIMITIVE (Pass By Reference)


*Objects
*Arrays

here the acutal value is provided any change to the value reflection on the original value

reference : "https://www.geeksforgeeks.org/javascript/pass-by-value-and-pass-by-reference-in-javascript/"

************************************************************************************

In computer science, an object is a value in memory which is possibly referenced by an identifier. In JavaScript, objects are the only mutable values.
 Functions are, in fact, also objects with the additional capability of being callable.

**************************************


** IMPORTATN CALRIFICATION **

# Javascript does not support "true pass by reference" 

    *it means primitve types like(number, string, boolean) etc, pass by value, an copy of the value is passed. Any change made does not modifiy the original value.
    *For objects and arrays, Js passes a reference value , which is essentially a pointer to the memory location of the data, this allows modification to the object or the array 
     but does not allow reassigning of the the original variable witin the funciton.

    *************** CODE *******************

    let value = { name: "suhan"};

    funciton reassignReference(o){
        o = ={name: "Ravi"};
        console.log("Inside Reference : ", o.name);
    }

    reassignReference(value);
    console.log("Outside Refernce: ", value.name);

    ************** OUTPUT *******************
    > Inside Refernce Ravi
    > Outside Reference suhan



    ******* Refer to source once again ************